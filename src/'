use std::process::Command;
use std::io::Result;

//let command = GitCommand{command: "ls".to_string(), args: [String::from("-h"), String::from("-a")].to_vec()};
pub fn run_process(command: &GitCommand) -> Result<()>{
    let mut cmd = command_builder(&command);
    let output = cmd.output()?;

    println!("{}", String::from_utf8_lossy(&output.stdout));

    Ok(())
} 


pub fn command_builder(command: &GitCommand) -> Command{
    let mut cmd = Command::new(command.command.clone());
        cmd.args(&command.args);
        cmd
}

pub struct GitCommand {
    pub command: String,
    pub args: Vec<String>
}
